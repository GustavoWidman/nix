--- modules/common/nushell/config/main/templates/flake-utils.nix	2025-10-27 17:21:21
+++ modules/common/nushell/config/main/templates/flake-utils-rust.nix	2025-10-27 17:23:02
@@ -1,26 +1,64 @@
 {
   inputs = {
-    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
+    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
+    fenix = {
+      url = "github:nix-community/fenix";
+      inputs.nixpkgs.follows = "nixpkgs";
+    };
+    crane.url = "github:ipetkov/crane";
     flake-utils.url = "github:numtide/flake-utils";
   };
 
   outputs =
     {
       nixpkgs,
       flake-utils,
+      fenix,
+      crane,
       ...
     }:
     flake-utils.lib.eachDefaultSystem (
       system:
       let
         pkgs = import nixpkgs {
           inherit system;
         };
+        toolchain = fenix.packages.${system}.default.toolchain;
+        craneLib = (crane.mkLib pkgs).overrideToolchain toolchain;
+        root = ./.;
+
+        args = {
+          src = pkgs.lib.fileset.toSource {
+            inherit root;
+            fileset = pkgs.lib.fileset.unions [
+              (craneLib.fileset.commonCargoSources root)
+              # (lib.fileset.fileFilter (file: file.hasExt "md") root)
+            ];
+          };
+          strictDeps = true;
+
+          nativeBuildInputs = [ ];
+          buildInputs = [ ];
+        };
+
+        bin = craneLib.buildPackage (
+          args
+          // {
+            cargoArtifacts = craneLib.buildDepsOnly args;
+          }
+        );
       in
       {
-        devShells.default = pkgs.mkShell {
+        # checks.<package> = bin;
 
+        packages.default = bin;
+        apps.default = flake-utils.lib.mkApp { drv = bin; };
+
+        devShells.default = pkgs.mkShell {
+          buildInputs = [
+            toolchain
+          ];
         };
       }
     );
 }
